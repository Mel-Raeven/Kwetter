AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  KwetterEventBus: 
    Type: AWS::Events::EventBus
    Properties: 
      Name: "KwetterEventBus"

  TestFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: messages/lambda/ # folder where your main program resides
      Handler: bootstrap
      Runtime: provided.al2
      Architectures: [arm64]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref KwetterMessagesDynamoDBTable
        - DynamoDBWritePolicy:
            TableName: !Ref KwetterMessagesDynamoDBTable

  KwetterMessagesDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "KwetterTable"
      AttributeDefinitions:
        - AttributeName: "MessageId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "MessageId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  KwetterAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "KwetterAPIGateway"
        paths:
            /postMessage:
              post:
                consumes:
                  - application/json
                produces:
                  - application/json
                parameters: []
                responses: {}
                x-amazon-apigateway-integration:
                  type: aws
                  httpMethod: POST
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TestFunction.Arn}/invocations"

  KwetterUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "KwetterUserPool"
      Policies:
        PasswordPolicy:
          RequireLowercase: true
          RequireSymbols: false
          RequireNumbers: true
          MinimumLength: "8"
          RequireUppercase: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
      AutoVerifiedAttributes:
        - email

  KwetterUserpoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref KwetterUserPool
      Domain: "kwetter"

  KwetterUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref KwetterUserPool
      ClientName: "KwetterUserPoolClient"
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows: 
        - code
      CallbackURLs: 
        - "https://localhost:8000"
      SupportedIdentityProviders:
        - COGNITO 
      AllowedOAuthScopes:
        - phone
        - email
        - openid

  KwetterAPIGatewayPermissionTestFunction:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TestFunction.Arn
      Principal: apigateway.amazonaws.com

  KwetterEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref KwetterEventBus
      EventPattern:
        source:
          - "api.gateway"
        detail-type:
          - "API Gateway Request"
      Targets:
        - Arn: !GetAtt TestFunction.Arn
          Id: "InvokeTestFunction"
