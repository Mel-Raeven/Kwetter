AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  KwetterEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: KwetterEventBus
  KwetterEventBusDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: KwetterEventBusDLQ
  KwetterEventBusDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
      - Ref: KwetterEventBusDLQ
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: '*'
          Action: sqs:SendMessage
          Resource:
            Fn::GetAtt:
            - KwetterEventBusDLQ
            - Arn
          Condition:
            ArnEquals:
              aws:SourceArn:
                Fn::GetAtt:
                - KwetterEventBus
                - Arn
  KwetterEventBusmessageContentCheckingFunctionDLQRule:
    Type: AWS::Events::Rule
    Properties:
      Name: KwetterEventBusmessageContentCheckingFunctionDLQRule
      EventBusName:
        Ref: KwetterEventBus
      EventPattern:
        source:
        - com.example.kwetter
      Targets:
      - Id: KwetterEventBusDLQTarget
        Arn:
          Fn::GetAtt:
          - KwetterEventBusDLQ
          - Arn
        RetryPolicy:
          MaximumRetryAttempts: 1
          MaximumEventAgeInSeconds: 60
        DeadLetterConfig:
          Arn:
            Fn::GetAtt:
            - KwetterEventBusDLQ
            - Arn
  messageContentCheckingFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
      SamResourceId: messageContentCheckingFunction
    Properties:
      CodeUri: messageContentCheckingFunction
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
      - arm64
      Role:
        Fn::GetAtt:
        - messageContentCheckingFunctionRole
        - Arn
  messageContentCheckingFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaLoggingPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: EventBridgePutEventsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: events:PutEvents
            Resource:
              Fn::GetAtt:
              - KwetterEventBus
              - Arn
  MessageCreateFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
      SamResourceId: MessageCreateFunction
    Properties:
      CodeUri: MessageCreateFunction
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
      - arm64
      Role:
        Fn::GetAtt:
        - MessageCreateFunctionRole
        - Arn
  MessageCreateFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaLoggingPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: DynamoDBWritePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: dynamodb:PutItem
            Resource:
              Fn::GetAtt:
              - KwetterMessagesDynamoDBTable
              - Arn
  MessageReadFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
      SamResourceId: MessageReadFunction
    Properties:
      CodeUri: MessageReadFunction
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
      - arm64
      Role:
        Fn::GetAtt:
        - MessageReadFunctionRole
        - Arn
  MessageReadFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaDynamoDBPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:Scan
            Resource:
            - Fn::GetAtt:
              - KwetterMessagesDynamoDBTable
              - Arn
  KwetterMessagesDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: KwetterMessagesDynamoDBTable
      AttributeDefinitions:
      - AttributeName: GUID
        AttributeType: S
      KeySchema:
      - AttributeName: GUID
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  KwetterAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: '''*'''
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${KwetterUserPool}
            Identity:
              Header: Authorization
      DefinitionBody:
        swagger: '2.0'
        info:
          title: KwetterAPIGateway
        paths:
          /postMessage:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              parameters: []
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${messageContentCheckingFunction.Arn}/invocations
                passthroughBehavior: WHEN_NO_MATCH
                responses:
                  default:
                    statusCode: '200'
                  4xx:
                    statusCode: '400'
                  5xx:
                    statusCode: '500'
          /getMessages/{userid}:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              parameters:
              - name: userid
                in: path
                required: true
                type: string
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: GET
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessageReadFunction.Arn}/invocations
                passthroughBehavior: WHEN_NO_MATCH
                responses:
                  default:
                    statusCode: '200'
                  4xx:
                    statusCode: '400'
                  5xx:
                    statusCode: '500'
                requestParameters:
                  integration.request.path.userid: method.request.path.userid
  OptionsMethodAuthorization:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
        gatewayresponse.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
        gatewayresponse.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: KwetterAPIGateway
      StatusCode: 200
  KwetterUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: KwetterUserPool
      DeletionProtection: ACTIVE
      Policies:
        PasswordPolicy:
          RequireLowercase: true
          RequireSymbols: false
          RequireNumbers: true
          MinimumLength: '8'
          RequireUppercase: true
      UsernameAttributes:
      - email
      Schema:
      - AttributeDataType: String
        Name: email
        Required: false
      AutoVerifiedAttributes:
      - email
  KwetterUserpoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId:
        Ref: KwetterUserPool
      Domain: kwetter
  KwetterUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: KwetterUserPool
      ClientName: KwetterUserPoolClient
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
      - code
      - implicit
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_SRP_AUTH
      CallbackURLs:
      - http://localhost:5173/auth/callback
      LogoutURLs:
      - http://localhost:5173/
      SupportedIdentityProviders:
      - COGNITO
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      - profile
  KwetterAPIGatewayPermissionMessageContentCheckingFunction:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - messageContentCheckingFunction
        - Arn
      Principal: apigateway.amazonaws.com
  KwetterAPIGatewayPermissionMessageReadFunction:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - MessageReadFunction
        - Arn
      Principal: apigateway.amazonaws.com
  APIGatewayMessageContentEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName:
        Ref: KwetterEventBus
      EventPattern:
        source:
        - api.gateway
        detail-type:
        - API Gateway Request
      Targets:
      - Arn:
          Fn::GetAtt:
          - messageContentCheckingFunction
          - Arn
        Id: InvokeTestFunction
  APIGatewayMessageReadEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName:
        Ref: KwetterEventBus
      EventPattern:
        source:
        - api.gateway
        detail-type:
        - API Gateway Request
      Targets:
      - Arn:
          Fn::GetAtt:
          - MessageReadFunction
          - Arn
        Id: InvokeMessageReadFunction
  EventRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - MessageCreateFunction
        - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - messageContentCheckingFunctionEventRule
        - Arn
  messageContentCheckingFunctionEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName:
        Ref: KwetterEventBus
      EventPattern:
        detail-type:
        - MessageCreation
      Targets:
      - Arn:
          Fn::GetAtt:
          - MessageCreateFunction
          - Arn
        Id: MessageCreateFunction
        RetryPolicy:
          MaximumRetryAttempts: 1
          MaximumEventAgeInSeconds: 60
        DeadLetterConfig:
          Arn:
            Fn::GetAtt:
            - KwetterEventBusDLQ
            - Arn
  KwetterDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: KwetterDashboard
      DashboardBody: "{\n  \"widgets\": [\n    {\n      \"type\": \"metric\",\n  \
        \    \"x\": 0,\n      \"y\": 0,\n      \"width\": 12,\n      \"height\": 6,\n\
        \      \"properties\": {\n        \"metrics\": [\n          [ \"AWS/Lambda\"\
        , \"Errors\", { \"label\": \"Errors\", \"id\": \"errors\" } ],\n         \
        \ [ \".\", \"Invocations\", { \"label\": \"Invocations\", \"id\": \"invocations\"\
        \ } ],\n          [ \".\", \"Duration\", { \"label\": \"Duration\", \"id\"\
        : \"duration\" } ]\n        ],\n        \"period\": 300,\n        \"stat\"\
        : \"Sum\",\n        \"region\": \"eu-central-1\",\n        \"title\": \"Lambda\
        \ Metrics\"\n      }\n    }\n  ]\n}\n"
